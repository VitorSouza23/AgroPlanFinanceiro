{"version":3,"sources":["../../../src/@ionic-native/plugins/email-composer/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EAAE,OAAA,EAAS,MAAA,EAAQ,YAAA,EAAc,iBAAA,EAAkB,MAAO,oBAAA,CAAqB;AA6BtF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA2CG;AASH,IAAa,aAAa;IAAS,iCAAiB;IAApD;;IA2DA,CAAC;IAzDC;;;;;OAKG;IAEH,mCAAW,GAAX,UAAY,GAAY;QACtB,MAAM,CAAC,IAAI,OAAO,CAAU,UAAC,OAAO,EAAE,MAAM;YAC1C,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBACR,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,WAAW,CAAC,GAAG,EAAE,UAAC,WAAoB;oBAC1D,EAAE,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;wBAChB,OAAO,EAAE,CAAC;oBACZ,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACN,MAAM,EAAE,CAAC;oBACX,CAAC;gBACH,CAAC,CAAC,CAAC;YACL,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,WAAW,CAAC,UAAC,WAAoB;oBACrD,EAAE,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;wBAChB,OAAO,EAAE,CAAC;oBACZ,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACN,MAAM,EAAE,CAAC;oBACX,CAAC;gBACH,CAAC,CAAC,CAAC;YACL,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;;;OAKG;IAEH,gCAAQ,GAAR,UAAS,KAAa,EAAE,WAAmB,IAAU,CAAC;IAEtD;;;;;;OAMG;IAKH,4BAAI,GAAJ,UAAK,OAA6B,EAAE,KAAW,IAAkB,MAAM,CAAC,CAAC,CAAC;IAQ5E,oBAAC;AAAD,CA3DA,AA2DC,CA3DkC,iBAAiB,GA2DnD;AANM,wBAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;CACnB,CAAC;AACF,kBAAkB;AACX,4BAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;AAjDA;IADC,YAAY,EAAE;;;;gDAqBd;AASD;IADC,OAAO,EAAE;;;;6CAC4C;AAatD;IAJC,OAAO,CAAC;QACP,YAAY,EAAE,CAAC;QACf,UAAU,EAAE,CAAC;KACd,CAAC;;;;yCACwE;AAnD/D,aAAa;IARzB,MAAM,CAAC;QACN,UAAU,EAAE,eAAe;QAC3B,MAAM,EAAE,sBAAsB;QAC9B,SAAS,EAAE,uBAAuB;QAClC,IAAI,EAAE,kDAAkD;QACxD,SAAS,EAAE,CAAC,gBAAgB,EAAE,SAAS,EAAE,SAAS,EAAE,KAAK,EAAE,SAAS,CAAC;KACtE,CAAC;GAEW,aAAa,CA2DzB;SA3DY,aAAa","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cordova, Plugin, CordovaCheck, IonicNativePlugin } from '@ionic-native/core';\n\ninterface Cordova {\n  plugins: CordovaPlugins & { email: any };\n}\n\ndeclare const cordova: Cordova;\n\nexport interface EmailComposerOptions {\n\n  app?: string;\n\n  to?: string | Array<string>;\n\n  cc?: string | Array<string>;\n\n  bcc?: string | Array<string>;\n\n  attachments?: Array<any>;\n\n  subject?: string;\n\n  body?: string;\n\n  isHtml?: boolean;\n\n}\n\n\n/**\n * @name Email Composer\n * @description\n *\n * Requires Cordova plugin: cordova-plugin-email-composer. For more info, please see the [Email Composer plugin docs](https://github.com/hypery2k/cordova-email-plugin).\n *\n *\n * @usage\n * ```typescript\n * import { EmailComposer } from '@ionic-native/email-composer';\n *\n * constructor(private emailComposer: EmailComposer) { }\n *\n * ...\n *\n *\n * this.emailComposer.isAvailable().then((available: boolean) =>{\n *  if(available) {\n *    //Now we know we can send\n *  }\n * });\n *\n * let email = {\n *   to: 'max@mustermann.de',\n *   cc: 'erika@mustermann.de',\n *   bcc: ['john@doe.com', 'jane@doe.com'],\n *   attachments: [\n *     'file://img/logo.png',\n *     'res://icon.png',\n *     'base64:icon.png//iVBORw0KGgoAAAANSUhEUg...',\n *     'file://README.pdf'\n *   ],\n *   subject: 'Cordova Icons',\n *   body: 'How are you? Nice greetings from Leipzig',\n *   isHtml: true\n * };\n *\n * // Send a text message using default options\n * this.emailComposer.open(email);\n *\n * ```\n * @interfaces\n * EmailComposerOptions\n */\n@Plugin({\n  pluginName: 'EmailComposer',\n  plugin: 'cordova-plugin-email',\n  pluginRef: 'cordova.plugins.email',\n  repo: 'https://github.com/hypery2k/cordova-email-plugin',\n  platforms: ['Amazon Fire OS', 'Android', 'Browser', 'iOS', 'Windows']\n})\n\nexport class EmailComposer extends IonicNativePlugin {\n\n  /**\n   * Verifies if sending emails is supported on the device.\n   *\n   * @param [app] {string} App id or uri scheme.\n   * @returns {Promise<any>} Resolves if available, rejects if not available\n   */\n  @CordovaCheck()\n  isAvailable(app?: string): Promise<any> {\n    return new Promise<boolean>((resolve, reject) => {\n      if (app) {\n        cordova.plugins.email.isAvailable(app, (isAvailable: boolean) => {\n          if (isAvailable) {\n            resolve();\n          } else {\n            reject();\n          }\n        });\n      } else {\n        cordova.plugins.email.isAvailable((isAvailable: boolean) => {\n          if (isAvailable) {\n            resolve();\n          } else {\n            reject();\n          }\n        });\n      }\n    });\n  }\n\n  /**\n   * Adds a new mail app alias.\n   *\n   * @param alias {string} The alias name\n   * @param packageName {string} The package name\n   */\n  @Cordova()\n  addAlias(alias: string, packageName: string): void { }\n\n  /**\n   * Displays the email composer pre-filled with data.\n   *\n   * @param options {EmailComposerOptions} Email\n   * @param [scope] {any} Scope for the promise\n   * @returns {Promise<any>} Resolves promise when the EmailComposer has been opened\n   */\n  @Cordova({\n    successIndex: 1,\n    errorIndex: 3\n  })\n  open(options: EmailComposerOptions, scope?: any): Promise<any> { return; }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}