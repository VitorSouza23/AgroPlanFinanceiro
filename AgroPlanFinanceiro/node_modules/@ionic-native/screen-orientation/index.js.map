{"version":3,"sources":["../../../src/@ionic-native/plugins/screen-orientation/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EAAE,OAAA,EAAS,eAAA,EAAiB,MAAA,EAAQ,iBAAA,EAAkB,MAAO,oBAAA,CAAqB;AACzF,OAAO,EAAE,UAAA,EAAW,MAAO,iBAAA,CAAkB;AAE7C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAwCG;AASH,IAAa,iBAAiB;IAAS,qCAAiB;IARxD;QAAA,qEA4DC;QAlDC;;WAEG;QACH,kBAAY,GAAG;YACb,gBAAgB,EAAE,kBAAkB;YACpC,kBAAkB,EAAE,oBAAoB;YACxC,iBAAiB,EAAE,mBAAmB;YACtC,mBAAmB,EAAE,qBAAqB;YAC1C,QAAQ,EAAE,UAAU;YACpB,SAAS,EAAE,WAAW;YACtB,GAAG,EAAE,KAAK;SACX,CAAC;;IAuCJ,CAAC;IArCC;;;OAGG;IAKH,oCAAQ,GAAR,cAA+B,MAAM,CAAC,CAAC,CAAC;IAExC;;;;;OAKG;IAEH,gCAAI,GAAJ,UAAK,WAAmB,IAAkB,MAAM,CAAC,CAAC,CAAC;IAEnD;;OAEG;IAEH,kCAAM,GAAN,cAAiB,CAAC;IAcpB,wBAAC;AAAD,CApDA,AAoDC,CApDsC,iBAAiB,GAoDvD;AANM,4BAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;CACnB,CAAC;AACF,kBAAkB;AACX,gCAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;AA5BA;IAJC,OAAO,CAAC;QACP,eAAe,EAAE,IAAI;QACrB,KAAK,EAAE,mBAAmB;KAC3B,CAAC;;;oCACU,UAAU;iDAAkB;AASxC;IADC,OAAO,CAAC,EAAE,YAAY,EAAE,IAAI,EAAE,CAAC;;;;6CACmB;AAMnD;IADC,OAAO,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;;;;+CACN;AAMlB;IADC,eAAe;;+CACH;AA5CF,iBAAiB;IAR7B,MAAM,CAAC;QACN,UAAU,EAAE,mBAAmB;QAC/B,MAAM,EAAE,mCAAmC;QAC3C,SAAS,EAAE,oBAAoB;QAC/B,IAAI,EAAE,6DAA6D;QACnE,SAAS,EAAE,CAAC,SAAS,EAAE,KAAK,EAAE,iBAAiB,CAAC;KACjD,CAAC;GAEW,iBAAiB,CAoD7B;SApDY,iBAAiB","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cordova, CordovaProperty, Plugin, IonicNativePlugin } from '@ionic-native/core';\nimport { Observable } from 'rxjs/Observable';\n\n/**\n * @name Screen Orientation\n * @description\n * Cordova plugin to set/lock the screen orientation in a common way for iOS, Android, WP8 and Blackberry 10.\n * This plugin is based on an early version of Screen Orientation API so the api does not currently match the current spec.\n *\n * Requires Cordova plugin: `cordova-plugin-screen-orientation`. For more info, please see the [Screen Orientation plugin docs](https://github.com/apache/cordova-plugin-screen-orientation).\n *\n * @usage\n * ```typescript\n * import { ScreenOrientation } from '@ionic-native/screen-orientation';\n *\n * constructor(private screenOrientation: ScreenOrientation) { }\n *\n * ...\n *\n *\n * // get current\n * console.log(this.screenOrientation.type); // logs the current orientation, example: 'landscape'\n *\n * // set to landscape\n * this.screenOrientation.lock(this.screenOrientation.ORIENTATIONS.LANDSCAPE);\n *\n * // allow user rotate\n * this.screenOrientation.unlock();\n * ```\n *\n * @advanced\n *\n * Accepted orientation values:\n *\n * | Value                         | Description                                                                  |\n * |-------------------------------|------------------------------------------------------------------------------|\n * | portrait-primary              | The orientation is in the primary portrait mode.                             |\n * | portrait-secondary            | The orientation is in the secondary portrait mode.                           |\n * | landscape-primary             | The orientation is in the primary landscape mode.                            |\n * | landscape-secondary           | The orientation is in the secondary landscape mode.                          |\n * | portrait                      | The orientation is either portrait-primary or portrait-secondary (sensor).   |\n * | landscape                     | The orientation is either landscape-primary or landscape-secondary (sensor). |\n *\n */\n@Plugin({\n  pluginName: 'ScreenOrientation',\n  plugin: 'cordova-plugin-screen-orientation',\n  pluginRef: 'screen.orientation',\n  repo: 'https://github.com/apache/cordova-plugin-screen-orientation',\n  platforms: ['Android', 'iOS', 'Windows Phone 8']\n})\n\nexport class ScreenOrientation extends IonicNativePlugin {\n\n  /**\n   * Convenience enum for possible orientations\n   */\n  ORIENTATIONS = {\n    PORTRAIT_PRIMARY: 'portrait-primary',\n    PORTRAIT_SECONDARY: 'portrait-secondary',\n    LANDSCAPE_PRIMARY: 'landscape-primary',\n    LANDSCAPE_SECONDARY: 'landscape-secondary',\n    PORTRAIT: 'portrait',\n    LANDSCAPE: 'landscape',\n    ANY: 'any'\n  };\n\n  /**\n   * Listen to orientation change event\n   * @return {Observable<void>}\n   */\n  @Cordova({\n    eventObservable: true,\n    event: 'orientationchange'\n  })\n  onChange(): Observable<void> { return; }\n\n  /**\n   * Lock the orientation to the passed value.\n   * See below for accepted values\n   * @param orientation {string} The orientation which should be locked. Accepted values see table above.\n   * @return {Promise<any>}\n   */\n  @Cordova({ otherPromise: true })\n  lock(orientation: string): Promise<any> { return; }\n\n  /**\n   * Unlock and allow all orientations.\n   */\n  @Cordova({ sync: true })\n  unlock(): void { }\n\n  /**\n   * Get the current orientation of the device.\n   */\n  @CordovaProperty\n  type: string;\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}